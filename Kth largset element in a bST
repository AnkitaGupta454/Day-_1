#include <bits/stdc++.h> 
using namespace std; 
  
class node  
{  
    public: 
    int data;  
    node* left, *right;  
};  

 void kthlargestRootutil(node*root,int k,int c)
 {
     if(root==NULL||c>=k)
     return;
     kthlargestRootutil(root->right,k,c);
     c++;
     if(c==k)
     {
         cout<<"K'th largset element is "<<root->data<<"\n";
         return;
     }
     kthlargestRootutil(root->left,k,c);
 }
void kthlargestRoot(node* root,int k)
{
    int c=0;
    kthlargestRootutil(root,k,c);
    
}
node* newNode(int data)  
{  
    node* Node = new node(); 
    Node->data = data;  
    Node->left = NULL;  
    Node->right = NULL;  
  
    return(Node);  
} 
node* insert(node* Node, int key) 
{ 
    if (Node == NULL) return newNode(key); 
    if (key < Node->data) 
        Node->left  = insert(Node->left, key); 
    else if (key > Node->data) 
        Node->right = insert(Node->right, key); 
    return Node; 
}
int main() 
{ 
    node *root = NULL; 
    root = insert(root, 50); 
    insert(root, 30); 
    insert(root, 20); 
    insert(root, 40); 
    insert(root, 70); 
    insert(root, 60); 
    insert(root, 80); 
  
    int c = 0; 
    for (int k=1; k<=7; k++) 
       kthlargestRoot(root, k); 
  
    return 0; 
}
