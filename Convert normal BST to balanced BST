#include <iostream>
#include<bits/stdc++.h>
using namespace std;
struct node{
    int data;
    struct node* left;
    struct node* right;
};

struct node* newNode(int data)
{
    node* temp=new node();
    temp->data=data;
    temp->left=NULL;
    temp->right=NULL;
    return temp;
}


void Inorder(node* root)
{
    if(root==NULL)
    return;
    Inorder(root->left);
    cout<<root->data<<" ";
    Inorder(root->right);
}

void BSTtoArray(node* root,int arr[],int *index)
{
    if(root==NULL)
    return;
    BSTtoArray(root->left,arr,index);
    arr[*index]=root->data;
    (*index)++;
    BSTtoArray(root->right,arr,index);
}

int countnodes(node* root)
{
   if(root==NULL)
   return 0;
   return(countnodes(root->left)+countnodes(root->right)+1);
}

node* ArraytoBst(int* arr,node* root,int start,int end)
{
    if(start>end)
    return NULL;
    int mid=(start+end)/2;
    root->data=arr[mid];
   root->left= ArraytoBst(arr,root->left,start,mid-1);
    root->right=ArraytoBst(arr,root->right,mid+1,end);

    return root;
}



node* balancedBST(node* root)
{
    if(root==NULL)
    return NULL;
    int n=countnodes(root);
    int* arr=new int[n];
    int start=0,end=n-1;
    BSTtoArray(root,arr,&start);
    ArraytoBst(arr,root,start,end);
}
int main()
{
     
  
    node* root = newNode(10); 
    root->left = newNode(8); 
    root->left->left = newNode(7); 
    root->left->left->left = newNode(6); 
    root->left->left->left->left = newNode(5);
    balancedBST(root); 
    cout<<"Inorder traversal of created tree is \n";
    Inorder(root);
    return 0;
}
