#include <iostream>
using namespace std;
class node{
    public:
    int data;
    node *left;
    node *right;
    
};
node* newNode(int data)
{
    node* temp=new node();
    temp->data=data;
    temp->right=temp->left=NULL;
}

node* insert(node* root,int data)
{
    if(root==NULL)
    return newNode(data);
    if(data<root->data)
     root->left=insert(root->left,data);
    else if(data>root->data)
    root->right=insert(root->right,data);
    return root;
}

node* findpresuc(node* root,node* &pre,node* &suc,int data)
{
    if(root==NULL)
    return NULL;
    if(root->data==data)
    {
        if(root->left!=NULL)
        {
            node* temp=root->left;
            while(temp->right)
            temp=temp->right;
            pre=temp;
            
        }
         else if(root->right!=NULL)
         {
             node* temp=root->right;
             while(temp->left)
             temp=temp->left;
             suc=temp;
         }
    }
    if(root->data>data)
    {
        suc=root;
        findpresuc(root->left,pre,suc,data);
    }
    else{
        pre=root;
        findpresuc(root->right,pre,suc,data);
    }
}

int main()
{
 
    
    node *root = NULL; 
    root = insert(root, 50); 
    insert(root, 30); 
    insert(root, 20); 
    insert(root, 40); 
    insert(root, 70); 
    insert(root, 60); 
    insert(root, 80); 
  
  
    node* pre = NULL, *suc = NULL; 
   int key = 65;  
    findpresuc(root, pre, suc, key); 
    if (pre != NULL) 
      cout << "Predecessor is " << pre->data << endl; 
    else
      cout << "No Predecessor"; 
  
    if (suc != NULL) 
      cout << "Successor is " << suc->data; 
    else
      cout << "No Successor"; 
    return 0;
}
