#include <bits/stdc++.h>
using namespace std;

void maxHeapify(int a[],int n,int i)
{
    int largest=i,l=(2*i)+2,r=(2*i)+1;
    while(l<n&&a[l]>a[largest])
    largest=l;
    while(r<n&&a[r]>a[largest])
    largest=r;
    if(largest!=i)
    {
        swap(a[largest],a[i]);
        maxHeapify(a,n,largest);
    }
}

void MaxHeap(int a[],int n){
    for(int i=(n/2)-1;i>=0;i--)
    maxHeapify(a,n,i);
}

int extractMax(int a[],int n)
{
    if(n==0)
    return INT_MAX;
    int max=a[0];
    if(n>1)
    {
        a[0]=a[n-1];
        maxHeapify(a,n,0);
    }
    n--;
    return max;
}
int main()
{
    int arr[] = { 1, 3, 5, 4, 6, 13, 10, 9, 8, 15, 17 }; 
    int n = sizeof(arr) / sizeof(arr[0]);
    MaxHeap(arr,n);
    int k=2,max;
    for(int i=0;i<k;i++)
    max=extractMax(arr,n);
    cout<<"K-th largest element in array is "<<max;
    return 0;
}

OUTPUT:-
k-th largset element in array is 15
