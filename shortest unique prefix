#include<bits/stdc++.h>
using namespace std;
#define MAX 256
#define MAX_WORD_LEN 500

struct trieNode{
    struct trieNode *child[MAX];
    int freq;
};

struct trieNode *newTrieNode(void)
{
    struct trieNode *newNode=new trieNode;
    newNode->freq=1;
    for(int i=0;i<MAX;i++)
    newNode->child[i]=NULL;
    return newNode;
}

void insert(struct trieNode* root,string str)
{
    int len=str.length();
    struct trieNode *pCrawl=root;
    for(int level=0;level<len;level++)
    {
        int index=str[level];

        if(!pCrawl->child[index])
        pCrawl->child[index]=newTrieNode();

        else
          (pCrawl->child[index]->freq)++;

          pCrawl=pCrawl->child[index];
    }
}
void findPrefixesUtil(struct trieNode *root,char prefix[],int ind)
{
    if(root==NULL)
    return;

    if(root->freq==1)
    {
        prefix[ind]='\0';
        cout<<prefix<<" ";
        return;
    }
    for(int i=0;i<MAX;i++)
    {
        if(root->child[i]!=NULL)
        {
            prefix[ind]=i;
            findPrefixesUtil(root->child[i],prefix,ind+1);
        }
    }
}

void find(string a[],int n)
{
    struct trieNode *root=newTrieNode();
    root->freq=0;
    for(int i=0;i<n;i++)
    insert(root,a[i]);
    char prefix[MAX_WORD_LEN];
    findPrefixesUtil(root,prefix,0);
}

int main()
{
    string a[]={"dog","duck","dove","zebra"};
    int n=sizeof(a)/sizeof(a[0]);
    find(a,n);
    return 0;
}

output:-
dog dov du z
