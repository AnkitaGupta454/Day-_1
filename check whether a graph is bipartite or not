//Check whether a graph is bipartite or not
#include<bits/stdc++.h>
using namespace std;
#define V 4

bool isBipartiteUtil(int G[][V],int src)
{
    int color[V];
    for(int i=0;i<V;i++)
    color[i]=-1;
    color[src]=1;
     queue<int>q;
     q.push(src);
     while(!q.empty())
     {
         int curr=q.front();
         q.pop();
         if(G[curr][curr]==1)
         return false;
         for(int v=0;v<V;v++)
         {
             if(G[curr][v]&&color[v]==1)
             {
                 color[v]=1-color[curr];
                 q.push(v);
             }
             else if(G[curr][v]&&color[v]==color[curr])
             return false;
         }

     }
     return true;
}


int main()
{
      int G[][V] = {{0, 1, 0, 1}, 
        {1, 0, 1, 0}, 
        {0, 1, 0, 1}, 
        {1, 0, 1, 0} 
    }; 
  
    isBipartiteUtil(G, 0) ? cout << "Yes" : cout << "No";
    return 0;
}

output:-
yes
