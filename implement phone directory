//Implement phone directory
#include<bits/stdc++.h>
using namespace std;

struct TrieNode 
{
    unordered_map<char,TrieNode*> child;
    bool isLast;
    TrieNode()
    {
        for(char i='a';i<='z';i++)
        child[i]=NULL;

        isLast=false;
    }
};

TrieNode *root=NULL;

void insert(string s)
{
    int len=s.length();
    TrieNode *itr=root;
    for(int i=0;i<len;i++)
    {
        TrieNode *nextNode=itr->child[s[i]];
        if(nextNode==NULL)
        {
            nextNode=new TrieNode();
            itr->child[s[i]]=nextNode;
        }
        itr=nextNode;
        if(i==len-1)
        itr->isLast=true;
    }
}

void displayContactUtil(TrieNode *curNode,string prefix)
{
    if(curNode->isLast)
    cout<<prefix<<endl;
for(char i='a';i<='z';i++)
{
    TrieNode *nextNode=curNode->child[i];
    if(nextNode!=NULL)
    displayContactUtil(nextNode,prefix+(char)i);
}
    
}

void DisplayContacts(string str)
{
    TrieNode *prevNode=root;
    string prefix="";
    int len=str.length();
    int i;
    for(i=0;i<len;i++)
    {
        prefix+=(char)str[i];
        char lastnode=prefix[i];
        TrieNode *curNode=prevNode->child[lastnode];

        if(curNode==NULL)
        {
            cout<<"\n No Results Found for "<<prefix<<endl;
            i++;
            break;
        }

        cout<<"\n Suggestion based on "<<prefix<<" are\n";
        displayContactUtil(curNode,prefix);
        prevNode=curNode;
    }
       for(;i<len;i++)
       {
            prefix+=(char)str[i];
             cout<<"\n No Results Found for "<<prefix<<endl;
       }
}

void InsertintoTrie(string contact[],int n)
{
    root=new TrieNode();
    for(int i=0;i<n;i++)
    insert(contact[i]);
}

int main()
{
    string contact[]={"gforgeeks","geeksquiz"};
    int n=sizeof(contact)/sizeof(string);
    InsertintoTrie(contact,n);
    string query="gekk";
    DisplayContacts(query);
    return 0;
}

output:-

 Suggestion based on g are
geeksquiz
gforgeeks

 Suggestion based on ge are
geeksquiz

 No Results Found for gek

 No Results Found for gekk
