#include <iostream>
#include<bits/stdc++.h>
using namespace std;

class node{
    public:
    int data;
    node *left;
    node *right;
};

node* newNode(int data)
{
    node* Node=new node();
    Node->data=data;
    Node->right=Node->left=NULL;
}

node* lca(node* root,int N1,int N2)
{
    if(root==NULL)
    return NULL;
    if(root->data==N1||root->data==N2)
    return root;
    node *left_lca=lca(root->left,N1,N2);
    node *right_lca=lca(root->right,N1,N2);
    if(left_lca&&right_lca)
    return root;
    return(left_lca!=NULL)?left_lca:right_lca;
}

int DistanceUtil(node* root,int level,int N)
{
    if(root==NULL)
    return -1;
    if(root->data==N)
    return level;
   int l=DistanceUtil(root->left,level+1,N);
    return(l!=-1)?l:DistanceUtil(root->right,level+1,N);
   
}

int distance(node* root,int N1,int N2)
{
    int level=0;
    node* LCA=lca(root,N1,N2);
    int d1=DistanceUtil(LCA,level,N1);
    int d2=DistanceUtil(LCA,level,N2);
    return(d1+d2);
}
int main()
{
    node *root=newNode(1);
    root->left=newNode(2);
    root->right=newNode(3);
    root->left->left=newNode(4);
    root->left->right=newNode(5);
    root->right->left=newNode(6);
    root->right->right=newNode(7);
    cout<<"dist(4,5)="<<distance(root,4,5);
    
    cout<<"\ndist(4,6)="<<distance(root,4,6);
      cout<<"\ndist(3,4)="<<distance(root,3,4);
     cout<<"\ndist(2,4)="<<distance(root,2,4);
    return 0;
}
