#include <iostream>
#include<bits/stdc++.h>
using namespace std;
struct node{
    int data;
    struct node* left;
    struct node* right;
};

struct node* newNode(int data)
{
    node* temp=new node();
    temp->data=data;
    temp->left=NULL;
    temp->right=NULL;
    return temp;
}


void Inorder(node* root)
{
    if(root==NULL)
    return;
    Inorder(root->left);
    cout<<root->data<<" ";
    Inorder(root->right);
}

void binarytoArray(node* root,int arr[],int *index)
{
    if(root==NULL)
    return;
    binarytoArray(root->left,arr,index);
    arr[*index]=root->data;
    (*index)++;
    binarytoArray(root->right,arr,index);
}

int countnodes(node* root)
{
   if(root==NULL)
   return 0;
   return(countnodes(root->left)+countnodes(root->right)+1);
}

void ArraytoBst(int* arr,node* root,int* index)
{
    if(root==NULL)
    return;
    ArraytoBst(arr,root->left,index);
    root->data=arr[*index];
    (*index)++;
    ArraytoBst(arr,root->right,index);
}

void BinarytreetoBST(node* root)
{
    if(root==NULL)
    return;
    int n=countnodes(root);
    int* arr=new int[n];
    int i=0;
    binarytoArray(root,arr,&i);
    sort(arr,arr+n);
    i=0;
    ArraytoBst(arr,root,&i);
   // free(arr[]);
}
int main()
{
     struct node* root = NULL; 
  
    /* Constructing tree given in the above figure 
          10 
         /  \ 
        30   15 
       /      \ 
      20       5   */
    root = newNode(10); 
    root->left = newNode(30); 
    root->right = newNode(15); 
    root->left->left = newNode(20); 
    root->right->right = newNode(5); 
  
    // convert Binary Tree to BST 
    BinarytreetoBST(root); 
    cout<<"Inorder traversal of created tree is \n";
    Inorder(root);
    return 0;
}
