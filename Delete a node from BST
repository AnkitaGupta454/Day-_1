#include <iostream>
using namespace std;
class node{
    public:
    int data;
    node *left;
    node *right;
};
node* newNode(int data)
{
    node* temp=new node();
    temp->data=data;
    temp->right=temp->left=NULL;
}

node* insert(node* root,int data)
{
    if(root==NULL)
    return newNode(data);
    if(data<root->data)
     root->left=insert(root->left,data);
    else if(data>root->data)
    root->right=insert(root->right,data);
    return root;
}

void Inorder(node* root)
{
    if(root!=NULL)
    {
        Inorder(root->left);
        cout<<root->data<<" ";
        Inorder(root->right);
    }
}

node* min(node* root)
{
    if(root==NULL)
    return (root);
    while(root->left!=NULL)
    root=root->left;
    return (root);
}
 node* deleteNode(struct node* root, int key)
{
    if (root == NULL)
        return root;
    if (key < root->data)
        root->left = deleteNode(root->left, key);

    else if (key > root->data)
        root->right = deleteNode(root->right, key);
    else {
        if (root->left == NULL) {
            struct node* temp = root->right;
            free(root);
            return temp;
        }
        else if (root->right == NULL) {
            struct node* temp = root->left;
            free(root);
            return temp;
        }
         node* temp = min(root->right);
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}
int main()
{
    node* root = NULL; 
    root = insert(root, 50); 
    insert(root, 30); 
    insert(root, 20); 
    insert(root, 40); 
    insert(root, 70); 
    insert(root, 60); 
    insert(root, 80); 
    Inorder(root); 
    cout<<"\n Delete 20\n";
    root=deleteNode(root,20);
    cout<<"\n Inorder traversal after modification\n";
    Inorder(root);
    cout<<"\n Delete 30\n";
    root=deleteNode(root,30);
    cout<<"\n Inorder traversal after modification\n";
    Inorder(root);
    return 0;
}
