#include<bits/stdc++.h>
using namespace std;

class Graph
{
    int V;
    list<int>*adj;
    public:
    Graph (int V)
    {
        this->V=V;
        adj=new list<int>[V];
    }

    ~Graph()
    {
        delete[] adj;
    }

    void addEdge(int v,int u)
    {
        adj[v].push_back(u);
        adj[u].push_back(v);
    } 

    void graphColouring()
    {
        int result[V];
        result[0]=0;

        for(int u=1;u<V;u++)
        result[u]=-1;

        bool available[V];
        for(int cr=0;cr<V;cr++)
        available[cr]=false;

        for(int u=1;u<V;u++)
        {
            list<int>::iterator i;
            for(i=adj[u].begin();i!=adj[u].end();i++)
            if(result[*i]!=-1)
            available[result[*i]]=true;

            int cr;
            for(cr=0;cr<V;cr++)
            if(available[cr]==false)
            break;

            result[u]=cr;
           for(i=adj[u].begin();i!=adj[u].end();i++)
            if(result[*i]!=-1)
            available[result[*i]]=false;
        }

        //print solution
        for(int i=0;i<V;i++)
        cout<<"vertex "<<i<<" ---> colour "<<result[i]<<endl;
    }
};

int main()
{
    Graph g(5);
    g.addEdge(0,1);
    g.addEdge(0,2);
    g.addEdge(2,3);
    g.addEdge(1,3);
    g.addEdge(1,2);
    g.addEdge(3,4);
    g.graphColouring();
    return 0;
}


output:-
vertex 0 ---> colour 0
vertex 1 ---> colour 1
vertex 2 ---> colour 2
vertex 3 ---> colour 0
vertex 4 ---> colour 1
