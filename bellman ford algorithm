#include<bits/stdc++.h>
using namespace std;

void BellmanFord(int graph[][3],int V,int E,int src)
{
    int dist[V];
    for(int i=0;i<V;i++)
    dist[i]=INT_MAX;
    dist[src]=0;
    //Relax all vertices V-1 times
    for(int i=0;i<V-1;i++)
    {
        for(int j=0;j<E;j++)
        {
            int u=graph[j][0],v=graph[j][1],weight=graph[j][2];
            if (dist[u] != INT_MAX && dist[u] + weight <
                               dist[v])
                dist[v] = 
                  dist[u] +weight;
        }
    }

    //Check for negative weight cycle
    for(int j=0;j<E;j++)
        {
            int u=graph[j][0],v=graph[j][1],weight=graph[j][2];
            if(dist[u]!=INT_MAX&&(dist[u]+weight<dist[v]))
              cout<<"Graph contains negative weight cycle"<<endl;
        }

    //Print distance
    cout<<"Vertex distance from source"<<endl;
    for(int i=0;i<V;i++)
    cout<<i<<"\t\t"<<dist[i]<<endl;

}

int main()
{
    int graph[][3]={{0,1,-1},{0,2,4},{1,2,3},{1,3,2},{1,4,2},{3,2,5},{3,1,1},{4,3,-3}};
    int V=5,E=8;
    BellmanFord(graph,V,E,0);
    return 0;
}


output:-
Vertex distance from source
0               0
1               -1
2               2
3               -2
4               1
