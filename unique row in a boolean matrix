//find unique row in a matrix
#include<bits/stdc++.h>
using namespace std;
#define Row 4
#define Col 5

class Node{
    public:
    bool isEndOfWord;
    Node *child[2];
};

Node *newNode()
{
    Node *temp=new Node;
    temp->isEndOfWord=0;
    temp->child[0]=temp->child[1]=NULL;
    return temp;
}

bool insert(Node **root ,int (*M)[Col],int row,int col)
{
    if((*root)==NULL)
    (*root)=newNode();

    if(col<Col)
    return insert(&((*root)->child[M[row][col]]),M,row,col+1);

    else
    {
        if(!(*root)->isEndOfWord)
        return (*root)->isEndOfWord=1;

        else
        {
            return 0;
        }
        
    }
    
}

void PrintRow(int(*M)[Col],int row)
{
   int i;
   for(i=0;i<Col;i++)
   cout<<M[row][i]<<" ";
   cout<<endl;
}

void findUniqueRows(int(*M)[Col])
{
    Node* root=NULL;
   
    for(int i=0;i<Row;i++)
    {
        if(insert(&root,M,i,0))
        PrintRow(M,i);
    }
}

int main()
{
    int M[Row][Col]={{0,1,0,0,1},{1,0,1,1,0},{0,1,0,0,1},{1,0,1,0,0}};
    findUniqueRows(M);
    return 0;
}

output:-
0 1 0 0 1
1 0 1 1 0
1 0 1 0 0
