#include<bits/stdc++.h>
using namespace std;
# define V 4
# define INF INT_MAX

void printSolution(int dist[][V])  
{  
    cout<<"The following matrix shows the shortest distances"
            " between every pair of vertices \n";  
    for (int i = 0; i < V; i++)  
    {  
        for (int j = 0; j < V; j++)  
        {  
            if (dist[i][j] == INF)  
                cout<<"INF"<<"     ";  
            else
                cout<<dist[i][j]<<"     ";  
        }  
        cout<<endl;  
    }  
} 

void Floyd_Warshell(int graph[][V])
{
  int dist[V][V];
  // intialize value of graph in dist
  for(int i=0;i<V;i++)
  {
      for(int j=0;j<V;j++)
      dist[i][j]=graph[i][j];
  }

  //relax vertices
 for (int k = 0; k < V; k++)  
    {  
        // Pick all vertices as source one by one  
        for (int i = 0; i < V; i++)  
        {  
            // Pick all vertices as destination for the  
            // above picked source  
            for (int j = 0; j < V; j++)  
            {  
                // If vertex k is on the shortest path from  
                // i to j, then update the value of dist[i][j]  
                if (dist[i][k] != INF && dist[k][j] != INF && dist[i][k] + dist[k][j] < dist[i][j])  
                    dist[i][j] = dist[i][k] + dist[k][j];  
            }  
        }  
    }
    printSolution(dist); 
}

int main()
{
    int graph[V][V] = { {0, 5, INF, 10},  
                        {INF, 0, 3, INF},  
                        {INF, INF, 0, 1},  
                        {INF, INF, INF, 0}  
                    }; 
 Floyd_Warshell(graph);
    return 0;
}

output:-
The following matrix shows the shortest distances between every pair of vertices
0     5     8     9
INF     0     3     4
INF     INF     0     1
INF     INF     INF     0
